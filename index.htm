<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Canva fun</title>
    <style>
      * {
        box-sizing: border-box;
      }

      body {
        margin: 0;
        overflow: hidden; /* Prevent horizontal scrollbars */
      }

      #canvas {
        display: block;
        margin: 0 auto; /* Center the canvas */
        border: 1px solid #ccc;
      }

      .clear {
        display: block;
        margin: 10px auto;
        padding: 10px 20px;
        font-size: 16px;
        font-weight: bold;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
        border: 2px solid #3498db;
        color: #a334db;
        border-radius: 5px;
        transition: background-color 0.3s, color 0.3s;
      }

      .clear:hover {
        background-color: #a334db;
        color: #fff;
      }
      p {
        font-weight: bolder;
        font-size: 30px;
        font-family: "Franklin Gothic Medium", "Arial Narrow", Arial, sans-serif;
        display: flex;
        justify-content: center;
      }
    </style>
  </head>
  <body>
    <canvas id="canvas"></canvas>
    <button class="clear">Clear Canvas</button>

    <script>
      const canvas = document.getElementById("canvas");
      const ctx = canvas.getContext("2d");
      canvas.height = window.innerHeight;
      canvas.width = window.innerWidth;
      ctx.strokeStyle = "darkviolet";
      ctx.lineJoin = "round";
      ctx.lineCap = "round";
      ctx.lineWidth = 100; //maybe changable
      // ctx.globalCompositeOperation = "multiply";

      let isDrawing = false;
      let lastX = 0;
      let lastY = 0;
      let hue = 0;
      let direction = true;

      function draw(e) {
        if (!isDrawing) return;
        console.log(e);
        ctx.strokeStyle = `hsl(${hue}, 100%, 50%)`;
        ctx.beginPath();
        ctx.moveTo(lastX, lastY);
        ctx.lineTo(e.offsetX, e.offsetY);
        ctx.stroke();
        [lastX, lastY] = [e.offsetX, e.offsetY];
        hue++;
        if (hue >= 360) {
          hue = 0;
        }
        if (ctx.lineWidth >= 100 || ctx.lineWidth <= 1) {
          direction = !direction;
        }
        if (direction) {
          ctx.lineWidth++;
        } else {
          ctx.lineWidth--;
        }
      }
      canvas.addEventListener("mousemove", draw);
      canvas.addEventListener("mousedown", (e) => {
        isDrawing = true;
        [lastX, lastY] = [e.offsetX, e.offsetY];
      });

      const clearButton = document.querySelector(".clear");

      clearButton.addEventListener("click", () => {
        // Clear the canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
      });
      canvas.addEventListener("mouseup", () => (isDrawing = false));
      canvas.addEventListener("mouseout", () => (isDrawing = false));
    </script>
  </body>
</html>
